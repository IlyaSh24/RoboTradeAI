const request = require('request');
const fs = require('fs');
const fsExtra = require('fs-extra');
const zipper = require('zip-local');
require('dotenv').config();

const HOST = process.env.HOST;
const PORT = process.env.PORT;

// const sendGreet = async (bot, msg) => {
//     await bot.sendMessage(msg.chat.id, `Hello, ${msg.from.first_name}`);
// };

const sendNavigationMenu = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, `Choose the navigation option below üëá`, {
        reply_markup: {
            keyboard: [
                ['ü§ñ Get robot', 'üìù How to use'],
                ['üß† How the robot works', '‚öôÔ∏è How to install robot']
            ],
            one_time_keyboard: true
        }
    });
};

const sendRobotDescriptionAndPurchaseMethod = async (bot, msg) => {
    await bot.sendPhoto(msg.chat.id, './images/premium.png');
    await bot.sendMessage(msg.chat.id, 
        'üìã Our team provides work in three variations that differ in the purpose of their use\n\n' +
        '1. <u>Basic</u>\n\n The robot is used as an assistant for your trading and is not used independently to make decisions on which way to put options.\n' + 
        'This robot includes analysis algorithms based on the <i>RSI, MACD, Alligator and Stochastic Oscillator indicators.</i>\n\n' +
        'By purchasing this version of robot you receive:\n\n' +
        '‚Ä¢ Probability of loss <i>~29.76%</i>\n' +
        '‚Ä¢ The limit on the profit earned at the expense of the robot\n' +
        '‚Ä¢ The maximum number of profitable trades per day received at the expense of the robot is <i>7</i>\n\n' +
        '<i>üí≤ Price: <s>99$</s> 59$</i>\n\n' +
        "2. <u>Standard</u>\n\n You get a robot that automatically puts options at the touch of a button." + 
        "You don't need to analyze the market yourself. The robot will do it for you\n" +
        'The robot uses K-means clustering and Gaussian mixture model algorithms. \n' +
        'This version is trained using 53 models since 2020 based on market history since 1989,' + 
        'which means that the robot almost accurately determines price movement at any time, since it has already analyzed a similar historical situation\n\n' +
        'By purchasing this version of smart robot you receive to follow:\n\n' +
        '‚Ä¢ Probability of loss <i>~2.31%</i>\n' +
        '‚Ä¢ The maximum daily limit of profit trades by robot: <b>30</b>\n' +
        '‚Ä¢ The maximum of successful options in row by robot: <b>7</b>\n' +
        '‚Ä¢ The detailed guide on when to use the robot most effectively\n' +
        '‚Ä¢ The personal manager to support all your robot trading process\n' +
        '‚Ä¢ The limit on the profit received from the robot is $5,000 per day\n\n' +
        '<i>üí≤ Price: <s>150$</s> 119$</i>\n\n' +
        '3. <u>Premium ‚≠ê(photo)</u>. You will get the smartest version of robot and removed limits from Standard\n\n' +
        'By purchasing this version of smart robot you receive to follow:\n\n' +
        '‚Ä¢ Probability of loss <i>~0.37%</i>' +
        '‚Ä¢ The maximum daily limit of profit trades by robot: <b>‚àû</b>\n' +
        '‚Ä¢ The maximum of successful options in row by robot: <b>‚àû</b>\n' +
        '‚Ä¢ The detailed guide on when to use the robot most effectively\n' +
        '‚Ä¢ The personal manager to support all your robot trading process\n' +
        '‚Ä¢ The limit on the profit received from the robot is <b>‚àû</b> per day\n\n' +
        '<i>üí≤ Price: <s>899$</s> 499$</i>\n\n' +
        'üëâ If you have any questions you can ask it here: <i>@robotradeaimanager</i>',
        {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üí≥ I want to get a robot']
                ],
                one_time_keyboard: true
            }
        });
};

const sendFreePurchaseCountry = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        msg.from.first_name + ', choose your country üëá', {
            reply_markup: {
                keyboard: [
                    ["üåé I'm not from Russia", "Russia"]
                ],
                one_time_keyboard: true
            }
        }
    );
};

const sendFreePurchaseSteps = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëáüëáüëá Below is step-by-step instruction for getting a robot\n\n' +
        'üîó 1. Register a new account using the link provided below\n' +
        'üîù 2. Top up your account balance minimum at least 50$\n' +
        '‚úçüèΩ 3. Copy your ID from profile tab (photo below) and send to robot in message field\n' +
        'ü§ñ 4. If your profile is registered correctly, the robot generates the extension for you\n\n' + 
        'üëâ Register link: <a href="https://pocket1.click/smart/4jlv8RwNpcPNtF">Go and register</a>\n\n' +
        'üí°üí°üí° <i>Advice: We highly recommend to top up your account with <b>200$</b></i>', {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üîé Check my profile ID']
                ],
                one_time_keyboard: true
            }
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/profile-id.png');
};

const sendCheckProfileID = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 'Send your profile ID here in the following format: <b>ID: [your profile ID]</b>', {
        parse_mode: 'HTML'
    });
    sendNavigationMenu(bot, msg);
};

const sendCheckProfileIDRussian = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à ID –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>ID: [ID –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è]</b>', {
        parse_mode: 'HTML'
    });
    sendNavigationMenu(bot, msg);
}

const sendProfileIDIncorrectFormat = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 'Please, enter your ID in the correct format');
    sendNavigationMenu(bot, msg);
};

const sendPersonalRobot = async (bot, msg) => {
    try {
        const profileId = msg.text.match(/\d+/);
        request(`${HOST}:${PORT}/trader/${profileId}`, async (err, response, body) => {
            const jsonResult = JSON.parse(body);
            if (jsonResult.result) {
                const robotJsFileContent = fs.readFileSync(__dirname + '/static/extension/robot.js')
                const robotJsFileContentWithProfileId = robotJsFileContent.toString().replace('#PROFILE_ID_HERE#', profileId);
                const traderDirPath = __dirname + '/static/traders/' + profileId;
                if (!fs.existsSync(traderDirPath)) {
                    fs.mkdirSync(traderDirPath);
                }
                fsExtra.copySync(__dirname + '/static/extension', traderDirPath);
                // Replace content of robot.js (where checks)
                fs.writeFileSync(traderDirPath + '/robot.js', robotJsFileContentWithProfileId);
                // Compress and create zip file
                zipper.sync.zip(traderDirPath).compress().save(traderDirPath + `/robot_${profileId}.zip`);
                await bot.sendDocument(msg.chat.id, `${traderDirPath}/robot_${profileId}.zip`, {
                    caption: 'üî• Our congratulations! Your extension is ready. Follow the instruction to install and use it'
                });
                await bot.sendMessage(msg.chat.id, 'üëá Learn how to install the extension in the browser ');
                sendNavigationMenu(bot, msg);
            }
            else {
                await bot.sendMessage(msg.chat.id, 'üòï Your profile ID is not found. If you are sure that you registered <b>correctly</b>, please, contact our manager üëâ <i>@robotradeaimanager</i>', {
                    parse_mode: 'HTML'
                });
                sendNavigationMenu(bot, msg);
            }
        });
    }
    catch (err) {
        fs.appendFile(__dirname + "/error.log", err + '\n', (err) => {
            console.log(err);
        });
    }
};

const sendFreePurchaseRussia = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëáüëáüëá –ù–∏–∂–µ –æ–ø–∏—Å–∞–Ω–∞ –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—é —Ä–æ–±–æ—Ç–∞\n\n' +
        'üîó 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n' +
        'üîù 2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É –æ—Ç 50$\n' +
        '‚úçüèΩ 3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π ID –ø—Ä–æ—Ñ–∏–ª—è (—Ñ–æ—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∏–∂–µ) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É <i>@robotradeaimanager</i>\n' +
        'ü§ñ 4. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –í–∞–º —Ä–æ–±–æ—Ç–∞\n\n' + 
        'üëâ –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <a href="https://po-ru.click/smart/4jlv8RwNpcPNtF">–ü–µ—Ä–µ–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>\n\n' +
        'üí°üí°üí° <i>–°–æ–≤–µ—Ç: –ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å—É–º–º—É –æ—Ç <b>200$</b></i>', {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è']
                ]
            }
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/profile-id.png');
};

const sendPaidPurchaseMethod = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üí≥ –°hoose the preferred method', {
            reply_markup: {
                keyboard: [
                    ['Bitcoin', 'USDT'],
                    ['Ethereum']
                ],    
                one_time_keyboard: true
            }
        }
    );
};

const sendPaidPurchaseByBitcoin = async (bot, msg, price) => {
    request('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD', async (err, response, body) => {
        await bot.sendMessage(msg.chat.id, 
            `1. Send ${(price / JSON.parse(body).USD).toFixed(5)} BTC (${price}$) to wallet: <span class="tg-spoiler">bc1q9566wdw6e5s8r7zpkf4mp4uzglejkfhjwwmhdm</span>\n` +
            '2. Send your wallet to our manager @robotradeaimanager. After that, our manager will check the receipt and contact you within <i>~24 hours</i> and will <b>send the robot</b>',
            {
                parse_mode: 'HTML'
            }
        );
        sendNavigationMenu(bot, msg);
    });
}

const sendPaidPurchaseByTether = async (bot, msg, price) => {
    request('https://min-api.cryptocompare.com/data/price?fsym=USDT&tsyms=USD', async (err, response, body) => {
        await bot.sendMessage(msg.chat.id, 
            `1. Send ${(price / JSON.parse(body).USD).toFixed(5)} USDT to wallet: <span class="tg-spoiler">TSVyj9hEx2vjA3CVCC3312erwVoRboGLNw</span>\n` +
            '2. Send your wallet to our manager @robotradeaimanager. After that, our manager will check the receipt and contact you within <i>~24 hours</i> and will <b>send the robot</b>',
            {
                parse_mode: 'HTML'
            }
        );
        sendNavigationMenu(bot, msg);
    });
};

const sendPaidPurchaseByEthereum = async (bot, msg, price) => {
    request('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD', async (err, response, body) => {
        await bot.sendMessage(msg.chat.id, 
            `1. Send ${(price / JSON.parse(body).USD).toFixed(5)} ETH (${price}$) to wallet: <span class="tg-spoiler">0xA1601DB02B02e441BAcDc3c2763490832f1F2564</span>\n` +
            '2. Send your wallet to our manager @robotradeaimanager. After that, our manager will check the receipt and contact you within <i>~24 hours</i> and will <b>send the robot</b>',
            {
                parse_mode: 'HTML'
            }
        );
        sendNavigationMenu(bot, msg);
    });
};

const sendHowToUseRobot = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        '‚úÖ 1. Install the extension that our manager provided\n<i>For more information on the installation instructions, see the <b>¬´Install extension¬ª section</b></i>\n' +
        '‚úÖ 2. In the amount field, enter the amount of the transaction you want the robot to open\n' +
        '‚úÖ 3. Choose ¬´Use overlap¬ª checkbox to turn on overlap mode.\n' +
        '‚úÖ 4. Choose ¬´Is live trading¬ª if you are going to trade real market (not OTC)\n' +
        '‚úÖ 5. Press ¬´Start¬ª button\n' + 
        '‚úÖ 6. The robot opens an option for the expiration time that you choose on the trading platform\n' +
        "‚ö†Ô∏è 7. Don't close the robot extension or active browser tab. This may result in the robot not functioning correctly\n" +
        '‚úÖ 8. Wait for the robot to analyze\n' +
        '‚úÖ 9. Take your profit üí≤üí≤üí≤',
        {
            parse_mode: 'HTML'
        }
    );
    sendNavigationMenu(bot, msg);
};

const sendHowTheRobotWorks = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üß†üß†üß† The bot is a trainable neural network using the elastic propagation method\n' +
        'üèãÔ∏èüèãÔ∏èüèãÔ∏è The robot was developed in 2019 and has been trained for 5 years on the basis of market indicators over the past 25 years, which gives ultra-high indicators of forecasting accuracy\n' +
        'üïóüïóüïó The robot does not hack the brokerage infrastructure in any way and gives a forecast based on training from a sample of early forecasts\n\n' +
        '<b>A statistics of robot accurancy by years: </b>\n' +
        '‚Ä¢ By 01.01.2020 - 67.49% of negative predictions\n' +
        '‚Ä¢ By 01.01.2021 - 38.24% of negative predictions\n' +
        '‚Ä¢ By 01.01.2022 - 11.71% of negative predictions\n' +
        '‚Ä¢ By 01.01.2023 - 4.28% of negative predictions\n' +
        '‚Ä¢ By 01.01.2024 - 0.487% of negative predictions',
        {
            parse_mode: 'HTML'
        }
    );
    sendNavigationMenu(bot, msg);
};

const sendHowToInstallRobot = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        '1. Open <b>Chrome browser</b>\n', 
        {
            parse_mode: 'HTML'
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/installation/home.png');
    await bot.sendMessage(msg.chat.id, 
        '2. In the upper right corner click <b>"Three dots"</b>. In the expanded panel, select <i>¬´Extensions¬ª</i> -> <i>¬´Manage Extensions¬ª</i>',
        {
            parse_mode: 'HTML'
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/installation/extensions.png');
    await bot.sendMessage(msg.chat.id, 
        '3. Switch to <i>¬´Developer mode¬ª</i> with toggle button in the right upper corner and click <i>Load unpacked</i>',
        {
            parse_mode: 'HTML'
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/installation/load_developer.png');
    await bot.sendMessage(msg.chat.id, 
        '4. Choose the folder with your extension and the robot is ready to use',
        {
            parse_mode: 'HTML'
        }
    );
    await bot.sendPhoto(msg.chat.id, './images/installation/ready.png');
    sendNavigationMenu(bot, msg);
};

const sendManagerContact = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        "‚ùì If you have any questions that wasn't covered by bot, please contact our manager üëâ <i>@robotradeaimanager</i>",
        {
            parse_mode: 'HTML'
        }
    );
    sendNavigationMenu(bot, msg);
};

const sendChooseService = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëá Choose the version of robot or service',
        {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['Basic robot', 'Standard robot'],
                    ['Premium robot'],
                ],    
                one_time_keyboard: true
            }
        }
    );
};

const sendBasicRobot = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëá Choose the payment method',
        {
            reply_markup: {
                keyboard: [
                    ['Basic robot for BTC', 'Basic robot for Ethereum'],
                    ['Basic robot for USDT']
                ],
                one_time_keyboard: true
            }
        }
    );
};

const sendBasicRobotForBTC = async (bot, msg) => {
    sendPaidPurchaseByBitcoin(bot, msg, 59);
};

const sendBasicRobotForTether = async (bot, msg) => {
    sendPaidPurchaseByTether(bot, msg, 59);
};

const sendBasicRobotForEthereum = async (bot, msg) => {
    sendPaidPurchaseByEthereum(bot, msg, 59);
};

const sendStandardRobot = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëá Choose the payment method',
        {
            reply_markup: {
                keyboard: [
                    ['Standard robot for BTC', 'Standard robot for Ethereum'],
                    ['Standard robot for USDT']
                ],
                one_time_keyboard: true
            }
        }
    );
};

const sendStandardRobotForBTC = async (bot, msg) => {
    sendPaidPurchaseByBitcoin(bot, msg, 119);
}

const sendStandardRobotForTether = async (bot, msg) => {
    sendPaidPurchaseByTether(bot, msg, 119);
}

const sendStandardRobotForEthereum = async (bot, msg) => {
    sendPaidPurchaseByEthereum(bot, msg, 119);
}

const sendPremiumRobot = async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, 
        'üëá Choose the payment method',
        {
            reply_markup: {
                keyboard: [
                    ['Premium robot for BTC', 'Premium robot for Ethereum'],
                    ['Premium robot for USDT']
                ],
                one_time_keyboard: true
            }
        }
    );
};

const sendPremiumRobotForBTC = async (bot, msg) => {
    sendPaidPurchaseByBitcoin(bot, msg, 499);
}

const sendPremiumRobotForTether = async (bot, msg) => {
    sendPaidPurchaseByTether(bot, msg, 499);
}

const sendPremiumRobotForEthereum = async (bot, msg) => {
    sendPaidPurchaseByEthereum(bot, msg, 499);
}

module.exports = { 
    //sendGreet, 
    sendBasicRobot,
    sendBasicRobotForBTC,
    sendBasicRobotForTether,
    sendBasicRobotForEthereum,
    sendStandardRobot,
    sendStandardRobotForBTC,
    sendStandardRobotForTether,
    sendStandardRobotForEthereum,
    sendPremiumRobot,
    sendPremiumRobotForBTC,
    sendPremiumRobotForTether,
    sendPremiumRobotForEthereum,
    sendChooseService,
    sendNavigationMenu, 
    sendRobotDescriptionAndPurchaseMethod, 
    sendFreePurchaseCountry,
    sendFreePurchaseSteps,
    sendCheckProfileID,
    sendCheckProfileIDRussian,
    sendProfileIDIncorrectFormat,
    sendPersonalRobot,
    sendFreePurchaseRussia,
    sendPaidPurchaseMethod,
    sendPaidPurchaseByBitcoin,
    sendPaidPurchaseByTether,
    sendPaidPurchaseByEthereum,
    sendHowToUseRobot,
    sendHowTheRobotWorks,
    sendHowToInstallRobot,
    sendManagerContact
};